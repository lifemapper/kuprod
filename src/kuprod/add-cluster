#!/bin/bash

# Defaults
TEST=0
FE_CPUS=6
FE_DISK_GB=200
FE_MEM_MB=12288
NUM_NODES=4
NODE_CPUS=4
NODE_DISK_GB=50

# Change these explicitly at the command prompt if you wantto change
# Command: rocks set host vm <vm-node-name> mem=<mem-in-Mb>
NODE_MEM_MB=12288

# Nodes are assigned round-robin.  If some VM containers do not have enough
# resources, re-assign virtual nodes to other VM containers
# Command: rocks set host vm <vm-node-name> physnode=<vm-container-name>
for i in "$@"
do
echo "i = $i"
case $i in
    -i=*|--ip=*)
        IP="${i#*=}"
        shift
        ;;
    -v=*|--vlan=*)
        VLAN="${i#*=}"
        shift
        ;;
    -fc=*|--fe_cpu_count=*)
        FE_CPUS="${i#*=}"
        shift
        ;;
    -fs=*|--fe_size_gb=*)
        FE_DISK_GB="${i#*=}"
        shift
        ;;
    -fm=*|--fe_mem_mb=*)
        FE_MEM_MB="${i#*=}"
        shift
        ;;
    -nc=*|--node_count=*)
        NUM_NODES="${i#*=}"
        shift
        ;;
    -ncc=*|--node_cpu_count=*)
        NODE_CPUS="${i#*=}"
        shift
        ;;
    -ns=*|--node_size_gb=*)
        NODE_DISK_GB="${i#*=}"
        shift
        ;;
    -nm=*|--node_mem_mb=*)
        NODE_MEM_MB="${i#*=}"
        shift
        ;;
    -t|--test)
        TEST=1
        shift
        ;;
    *)
        # unknown option
    ;;
esac
done

# ....................................
### 
# ....................................
usage () 
{
    echo "Usage:  $0  \ "
    echo "        --ip=<ip address> \ "
    echo "        --vlan=<vlan #> \ "
    echo "        --fe_cpu_count=<cores on frontend (6)> \ "
    echo "        --fe_size_gb=<frontend size in gb (200)> \ "
    echo "        --fe_mem_mb=<frontend RAM in mb (12288)> \ "
    echo "        --node_count=<number of compute nodes (4)> \ " 
    echo "        --node_cpu_count=<cores per node (4)> \ "
    echo "        --node_size_gb=<node size in gb (50)> \ "
    echo "        --node_mem_mb=<node RAM in mb (12288)> "
    echo "This script is run by the superuser. It will create a Virtual Cluster"
    echo "with the default values above or user-supplied values"
    echo "The log output of the script is `/bin/basename $0`_<last-quartet-of-ip>.log"
    exit 1
}

# ....................................
### time
# ....................................
TimeStamp () {
    if [ $TEST -eq 0 ]; then
        echo `/bin/date` $1 >> $LOG
    else
        echo $1    
    fi
}

# ....................................
### get command line parameters
# ....................................
setParams () {
    if [ $TEST -eq 0 ]; then
        COM=
        echo "NOT testing"
    else
        COM=echo
        echo "Testing"
    fi

    vchosts=`rocks list host | grep 'VM Container' | awk -F: '{print $1}'`
    lastq="${IP##*.}"
    hn=`/bin/hostname`
    idx=`expr index "$hn" .`
    FE_CONTAINER=${hn:0:idx-1}
    FE_NAME="$FE_CONTAINER"-"$lastq"
    dt=$(date +%F | tr - _)

    LOG="$FE_NAME"_"$dt".log
    rm "$FE_NAME"_*.log
    touch $LOG

    TimeStamp "# Start"
    echo "  Script called with: add-cluster \ " >> $LOG 
    echo "                      --ip=$IP \ " >> $LOG
    echo "                      --vlan=$VLAN \ " >> $LOG
    echo "                      --fe_cpu_count=$FE_CPUS \ " >> $LOG
    echo "                      --fe_size_gb=$FE_DISK_GB \ " >> $LOG 
    echo "                      --fe_mem_mb=$FE_MEM_MB \ " >> $LOG
    echo "                      --node_count=$NUM_NODES \ " >> $LOG 
    echo "                      --node_cpu_count=$NODE_CPUS \ " >> $LOG
    echo "                      --node_size_gb=$NODE_DISK_GB \ " >> $LOG 
    echo "                      --node_mem_mb=$NODE_MEM_MB " >> $LOG
}

# ....................................
### add cluster 
# ....................................
addCluster () {
    # check if cluster already exists
    result=`rocks list cluster | grep $FE_NAME | awk -F: '{print $1}'`
    if [ "$result" == "$FE_NAME" ] ; then
        msg="Virtual cluster $FE_NAME exists, no commands will be executed."
        TimeStamp $msg
    else
        cmd="rocks add cluster \
             $IP $NUM_NODES \
             cluster-naming=1 \
             fe-name=$FE_NAME \
             fe-container=$FE_CONTAINER \
             disk-per-frontend=$FE_DISK_GB \
             cpus-per-compute=$NODE_CPUS \
             disk-per-compute=$NODE_DISK_GB \
             mem-per-compute=$NODE_MEM_MB \
             vlan=$VLAN"
        TimeStamp "Creating cluster"
        $COM $cmd
    fi
}

# ....................................
### set VMs disks and memory
# ....................................
setDisksMem () {
    cnodes=`rocks list cluster $FE_NAME | tail -n +3 |  awk '{print $2}'`
    for h in $cnodes;
    do  
        cmd="rocks set host vm $h disk=file:/state/partition1/kvm/disks/$h.vda,vda,virtio"
        TimeStamp "Setting node disk file"
        $COM $cmd
        cmd="rocks set host vm $h disksize=$NODE_DISK_GB"
        TimeStamp "Setting node disk size"
        $COM $cmd
    done

    exists=`zfs list | grep tank/vms/$FE_NAME | wc -l`
    if [ "$exists" == 0 ] ; then
       cmd="zfs create -V ${FE_DISK_GB}G tank/vms/${FE_NAME}"
       TimeStamp "Creating ZFS volume"
       $COM $cmd
    else
       TimeStamp "ZFS tank/vms/$FE_NAME exists"
    fi

    cmd="rocks set host vm $FE_NAME disk=phy:/dev/tank/vms/$FE_NAME,vda,virtio"
    TimeStamp "Setting FE disk"
    $COM $cmd
    
    cmd="rocks set host vm $FE_NAME disksize=$FE_DISK_GB"
    TimeStamp "Setting FE disk size"
    $COM $cmd   

    cmd="rocks set host cpus $FE_NAME cpus=$FE_CPUS" 
    TimeStamp "Setting FE cpus"
    $COM $cmd

    cmd="rocks set host vm $FE_NAME mem=$FE_MEM_MB"
    TimeStamp "Setting FE disk"
    $COM $cmd

}

### Main ###
echo ""
if [ $TEST -ne 0 ]; then
    echo "TESTING"
fi
echo "  Script called with: add-cluster \ "
echo "                           --ip=$IP \ "
echo "                           --vlan=$VLAN \ "
echo "                           --fe_cpu_count=$FE_CPUS \ "
echo "                           --fe_size_gb=$FE_DISK_GB \ "
echo "                           --fe_mem_mb=$FE_MEM_MB \ "
echo "                           --node_count=$NUM_NODES \ "
echo "                           --node_cpu_count=$NODE_CPUS \ "
echo "                           --node_size_gb=$NODE_DISK_GB \ "
echo "                           --node_mem_mb=$NODE_MEM_MB "
echo ""
echo " #IP = ${#IP}, #VLAN =  ${#VLAN}"
echo ""

lastq="${IP##*.}"
echo "lastq = $lastq"
echo ""

if [ ${#IP} -lt 7 ] || [ ${#VLAN} -lt 1 ]; then
    echo "IP ($IP) length is less than 7 or VLAN ($VLAN) is less than 1"
    usage
fi

setParams
addCluster
setDisksMem

